networks:
  default:
    name: landing
    driver: overlay
    attachable: true

secrets:
  proxy.certificate:
    file: ${PROXY_CERT_PATH}
  proxy.key:
    file: ${PROXY_KEY_PATH}

services:
  proxy:
    image: traefik:v3.4
    ports:
      - target: 443
        published: 443
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints:
          - node.role == manager
    command: >
      --providers.swarm
      --providers.swarm.exposedByDefault=false
      --providers.file.directory=/traefik
      --providers.file.watch=true
      --entryPoints.web.address=:80
      --entryPoints.websecure.address=:443
      --entryPoints.websecure.asDefault=true
      --entryPoints.web.http.redirections.entryPoint.to=websecure
      --entryPoints.web.http.redirections.entryPoint.scheme=https
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik:/traefik
    secrets:
      - source: proxy.certificate
        target: /certs/fullchain.pem
      - source: proxy.key
        target: /certs/privkey.pem
    ulimits:
      nofile:
        soft: 20000
        hard: 20000

  landing-api-prod:
    image: skulpture/landing-api:latest
    environment:
      LOG_LEVEL: ${LOG_LEVEL}
      OTEL_SERVICE_NAME: landing-api-prod
      GDRIVE_FOLDER_ID: ${GDRIVE_FOLDER_ID}
      GSHEETS_SPREADSHEET_ID: ${GSHEETS_SPREADSHEET_ID}
      ENABLE_TELEMETRY: "${ENABLE_TELEMETRY}"
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT}
      OTEL_EXPORTER_OTLP_HEADERS: "Authorization=Bearer ${OTEL_EXPORTER_OTLP_AUTH_TOKEN}"
      POSTMARK_TEMPLATE: ${POSTMARK_TEMPLATE}
      POSTMARK_SERVER_TOKEN: ${POSTMARK_SERVER_TOKEN}
      POSTMARK_ACCOUNT_TOKEN: ${POSTMARK_ACCOUNT_TOKEN}
      GO_ENV: "production"
    deploy:
      mode: replicated
      replicas: 2
      labels:
        traefik.enable: "true"
        traefik.http.routers.landing-api-prod.rule: Host(`landing-api-master.skulpture.xyz`)
        traefik.http.services.landing-api-prod.loadbalancer.server.port: 80
        traefik.http.services.landing-api-prod.loadbalancer.healthcheck.path: /ping
        traefik.http.services.landing-api-prod.loadbalancer.healthcheck.status: 200
        traefik.swarm.lbswarm: "true"
    ulimits:
      nofile:
        soft: 20000
        hard: 20000
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost/ping || exit 1" ]
      interval: 1m30s
      timeout: 1m
      retries: 5
      start_period: 30s

  landing-api-dev:
    image: skulpture/landing-api:dev
    environment:
      LOG_LEVEL: ${LOG_LEVEL}
      OTEL_SERVICE_NAME: landing-api-dev
      GDRIVE_FOLDER_ID: ${GDRIVE_FOLDER_ID_DEV}
      GSHEETS_SPREADSHEET_ID: ${GSHEETS_SPREADSHEET_ID_DEV}
      ENABLE_TELEMETRY: "${ENABLE_TELEMETRY}"
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT}
      OTEL_EXPORTER_OTLP_HEADERS: "Authorization=Bearer ${OTEL_EXPORTER_OTLP_AUTH_TOKEN}"
      POSTMARK_TEMPLATE: ${POSTMARK_TEMPLATE_DEV}
      POSTMARK_SERVER_TOKEN: ${POSTMARK_SERVER_TOKEN}
      POSTMARK_ACCOUNT_TOKEN: ${POSTMARK_ACCOUNT_TOKEN}
      GO_ENV: "development"
    deploy:
      mode: replicated
      replicas: 1
      labels:
        traefik.enable: "true"
        traefik.http.routers.landing-api-dev.rule: Host(`landing-api-dev.skulpture.xyz`)
        traefik.http.services.landing-api-dev.loadbalancer.server.port: 80
        traefik.http.services.landing-api-dev.loadbalancer.healthcheck.path: /ping
        traefik.http.services.landing-api-dev.loadbalancer.healthcheck.status: 200
        traefik.swarm.lbswarm: "true"
    ulimits:
      nofile:
        soft: 20000
        hard: 20000
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost/ping || exit 1" ]
      interval: 1m30s
      timeout: 1m
      retries: 5
      start_period: 30s

